/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package streaming;

import java.awt.AWTException;
import java.awt.Color;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.imgscalr.Scalr;

/**
 *
 * @author olegb
 */
public class ScreenRecorder extends javax.swing.JFrame {

    private int port = 1331;

    private static DatagramSocket datagramSocket;
    private byte[] buffer;

    private MouseEvent getPositionEvent;
    private boolean running = false;
    private boolean streamStatus = false;

    // Colors
    private Color brightRed = new Color(242, 38, 19);
    private Color darkRed = new Color(84, 11, 12);
    private Color brightGreen = new Color(127, 255, 0);
    private Color darkGreen = new Color(0, 75, 0);

    private ArrayList<StreamConnection> streamConnections = new ArrayList<StreamConnection>();

    /**
     * Creates new form Server
     */
    public ScreenRecorder() {
        initComponents();

        try {
            datagramSocket = new DatagramSocket(port);
        } catch (Exception ex) {
            Logger.getLogger(ScreenRecorder.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Set button StreamStatusOff to on position
        jPanelStreamStatusOff.setBackground(brightRed);
        jLabelStreamStatusOff.setForeground(Color.white);

        // Set button StreamStatusOn to off position
        jPanelStreamStatusOn.setBackground(darkGreen);
        jLabelStreamStatusOn.setForeground(Color.GRAY);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelDragWindow = new javax.swing.JPanel();
        jPanelCloseWindow = new javax.swing.JPanel();
        jPanelMinimizeWindow = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabelDisplayImages = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanelStreamStatusOn = new javax.swing.JPanel();
        jLabelStreamStatusOn = new javax.swing.JLabel();
        jPanelStreamStatusOff = new javax.swing.JPanel();
        jLabelStreamStatusOff = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPaneChat = new javax.swing.JTextPane();
        jTextFieldMessage = new javax.swing.JTextField();
        jButtonSendMessage = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(700, 400));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanelDragWindow.setBackground(new java.awt.Color(1, 50, 67));
        jPanelDragWindow.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanelDragWindowMouseDragged(evt);
            }
        });
        jPanelDragWindow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanelDragWindowMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanelDragWindowLayout = new javax.swing.GroupLayout(jPanelDragWindow);
        jPanelDragWindow.setLayout(jPanelDragWindowLayout);
        jPanelDragWindowLayout.setHorizontalGroup(
            jPanelDragWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        jPanelDragWindowLayout.setVerticalGroup(
            jPanelDragWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        getContentPane().add(jPanelDragWindow, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 50));

        jPanelCloseWindow.setBackground(new java.awt.Color(228, 141, 154));
        jPanelCloseWindow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanelCloseWindowMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCloseWindowLayout = new javax.swing.GroupLayout(jPanelCloseWindow);
        jPanelCloseWindow.setLayout(jPanelCloseWindowLayout);
        jPanelCloseWindowLayout.setHorizontalGroup(
            jPanelCloseWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        jPanelCloseWindowLayout.setVerticalGroup(
            jPanelCloseWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        getContentPane().add(jPanelCloseWindow, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 0, -1, 50));

        jPanelMinimizeWindow.setBackground(new java.awt.Color(228, 241, 254));
        jPanelMinimizeWindow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanelMinimizeWindowMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanelMinimizeWindowLayout = new javax.swing.GroupLayout(jPanelMinimizeWindow);
        jPanelMinimizeWindow.setLayout(jPanelMinimizeWindowLayout);
        jPanelMinimizeWindowLayout.setHorizontalGroup(
            jPanelMinimizeWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        jPanelMinimizeWindowLayout.setVerticalGroup(
            jPanelMinimizeWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        getContentPane().add(jPanelMinimizeWindow, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 0, -1, 50));

        jPanel1.setBackground(new java.awt.Color(240, 240, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jLabelDisplayImages, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 46, 480, 296));

        jPanel6.setBackground(new java.awt.Color(92, 151, 191));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanelStreamStatusOn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanelStreamStatusOnMousePressed(evt);
            }
        });

        jLabelStreamStatusOn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelStreamStatusOn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelStreamStatusOn.setText("1");

        javax.swing.GroupLayout jPanelStreamStatusOnLayout = new javax.swing.GroupLayout(jPanelStreamStatusOn);
        jPanelStreamStatusOn.setLayout(jPanelStreamStatusOnLayout);
        jPanelStreamStatusOnLayout.setHorizontalGroup(
            jPanelStreamStatusOnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelStreamStatusOnLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabelStreamStatusOn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelStreamStatusOnLayout.setVerticalGroup(
            jPanelStreamStatusOnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelStreamStatusOnLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabelStreamStatusOn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel6.add(jPanelStreamStatusOn, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 0, 50, 40));

        jPanelStreamStatusOff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanelStreamStatusOffMousePressed(evt);
            }
        });

        jLabelStreamStatusOff.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabelStreamStatusOff.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelStreamStatusOff.setText("0");

        javax.swing.GroupLayout jPanelStreamStatusOffLayout = new javax.swing.GroupLayout(jPanelStreamStatusOff);
        jPanelStreamStatusOff.setLayout(jPanelStreamStatusOffLayout);
        jPanelStreamStatusOffLayout.setHorizontalGroup(
            jPanelStreamStatusOffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelStreamStatusOffLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabelStreamStatusOff, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanelStreamStatusOffLayout.setVerticalGroup(
            jPanelStreamStatusOffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelStreamStatusOffLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabelStreamStatusOff, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel6.add(jPanelStreamStatusOff, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 0, 50, 40));

        jPanel1.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        jTextPaneChat.setEditable(false);
        jScrollPane1.setViewportView(jTextPaneChat);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 60, 190, 239));

        jTextFieldMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldMessageKeyPressed(evt);
            }
        });
        jPanel1.add(jTextFieldMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 310, 110, 20));

        jButtonSendMessage.setText("Send");
        jButtonSendMessage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonSendMessageMousePressed(evt);
            }
        });
        jPanel1.add(jButtonSendMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 310, 70, 20));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 700, 360));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanelDragWindowMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelDragWindowMousePressed
        // Get current position
        getPositionEvent = evt;
    }//GEN-LAST:event_jPanelDragWindowMousePressed

    private void jPanelDragWindowMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelDragWindowMouseDragged
        // Set new location
        setLocation(evt.getXOnScreen() - getPositionEvent.getX(),
                evt.getYOnScreen() - getPositionEvent.getY());
    }//GEN-LAST:event_jPanelDragWindowMouseDragged

    private void jPanelMinimizeWindowMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelMinimizeWindowMousePressed
        this.setState(ICONIFIED);
    }//GEN-LAST:event_jPanelMinimizeWindowMousePressed

    private void jPanelCloseWindowMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelCloseWindowMousePressed
        running = false;

        String message = "\\offline";
        sendMessageToAllClients(message.getBytes());

        System.exit(0);
    }//GEN-LAST:event_jPanelCloseWindowMousePressed

    private void jPanelStreamStatusOffMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelStreamStatusOffMousePressed
        changeStreamStatus();
    }//GEN-LAST:event_jPanelStreamStatusOffMousePressed

    private void jPanelStreamStatusOnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelStreamStatusOnMousePressed
        changeStreamStatus();
    }//GEN-LAST:event_jPanelStreamStatusOnMousePressed

    private void jTextFieldMessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldMessageKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            String message = jTextFieldMessage.getText();

            if (!message.isEmpty()) {
                jTextFieldMessage.setText("");

                // Add message to chat panel
                jTextPaneChat.setText(jTextPaneChat.getText().concat(" Server: " + message + "\n"));

                String messageToSend = "\\message: Admin" + ": " + message + "\\end";
                sendMessageToAllClients(messageToSend.getBytes());
            }
        }
    }//GEN-LAST:event_jTextFieldMessageKeyPressed

    private void jButtonSendMessageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSendMessageMousePressed
        String message = jTextFieldMessage.getText();

        if (!message.isEmpty()) {
            jTextFieldMessage.setText("");

            // Add message to chat panel
            jTextPaneChat.setText(jTextPaneChat.getText().concat(" Server: " + message + "\n"));

            String messageToSend = "\\message: Server" + ": " + message + "\\end";
            sendMessageToAllClients(messageToSend.getBytes());
        }
    }//GEN-LAST:event_jButtonSendMessageMousePressed

    private void changeStreamStatus() {
        changeStreamStatusColor();

        if (!streamStatus) {
            startStream();
        } else {
            stopStream();
        }

        // Change stream status
        streamStatus = !streamStatus;
    }

    private void changeStreamStatusColor() {

        // If stream is on than change to off
        if (jPanelStreamStatusOff.getBackground() == brightRed
                || jPanelStreamStatusOn.getBackground() == darkGreen) {

            // Set button StreamStatusOff to off position
            jPanelStreamStatusOff.setBackground(darkRed);
            jLabelStreamStatusOff.setForeground(Color.GRAY);

            // Set button StreamStatusOn to on position
            jPanelStreamStatusOn.setBackground(brightGreen);
            jLabelStreamStatusOn.setForeground(Color.white);

            // else if stream is of than change to on
        } else if (jPanelStreamStatusOff.getBackground() == darkRed
                || jPanelStreamStatusOn.getBackground() == brightGreen) {

            // Set button StreamStatusOff to on position
            jPanelStreamStatusOff.setBackground(brightRed);
            jLabelStreamStatusOff.setForeground(Color.white);

            // Set button StreamStatusOn to off position
            jPanelStreamStatusOn.setBackground(darkGreen);
            jLabelStreamStatusOn.setForeground(Color.GRAY);
        } else {
            System.out.println("Stream status error");
        }
    }

    private void startStream() {
        // Set running to true
        running = true;
        // Create new screen recording thread
        startStreamThread();
        // Create new waiting for clients thread
        startWaitingMessagesThread();
        // Send message that stream is online
        String message = "\\online";
        sendMessageToAllClients(message.getBytes());
    }

    private BufferedImage getImage() {
        try {
            Robot robot = new Robot();

            Rectangle rectangle = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());
            BufferedImage bufferedImage = robot.createScreenCapture(rectangle);

            return bufferedImage;
        } catch (AWTException ex) {
            Logger.getLogger(ScreenRecorder.class.getName()).log(Level.SEVERE, null, ex);
        }

        return null;
    }

    private void startStreamThread() {
        new Thread("Screen Recorder") {

            BufferedImage image;
            BufferedImage scaledImage;

            @Override
            public void run() {
                try {
                    while (running) {
                        // Get a desktop screenshot
                        image = getImage();

                        // Scale image and 
                        scaledImage = Scalr.resize(image, Scalr.Method.BALANCED, 480, 270);

                        // Send image
                        sendMessageToAllClients(getBytes(scaledImage));

                        // Set screenshot as label icon
                        jLabelDisplayImages.setIcon(new ImageIcon(scaledImage));

                    }

                    image = ImageIO.read(ScreenRecorder.class.getResource("/images/StreamOffline.jpg"));
                    scaledImage = Scalr.resize(image, Scalr.Method.BALANCED, 480, 270);

                    jLabelDisplayImages.setIcon(new ImageIcon(scaledImage));
                } catch (IOException ex) {
                    Logger.getLogger(ScreenRecorder.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    }

    private void startWaitingMessagesThread() {
        new Thread("Waiting for Clients Thread") {
            DatagramPacket packet;
            byte[] waitingBuffer;

            @Override
            public void run() {
                while (running) {
                    try {
                        waitingBuffer = new byte[256];

                        packet = new DatagramPacket(waitingBuffer, waitingBuffer.length);
                        datagramSocket.receive(packet);

                        processingMessage(packet);

                    } catch (IOException ex) {
                        Logger.getLogger(ScreenRecorder.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }.start();
    }

    private byte[] getBytes(BufferedImage image) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try {
            ImageIO.write(image, "jpg", baos);
        } catch (IOException ex) {
            Logger.getLogger(ScreenRecorder.class.getName()).log(Level.SEVERE, null, ex);
        }
        byte[] bytes = baos.toByteArray();
        return bytes;
    }

    private byte[] getBytes(String message) {
        buffer = new byte[256];
        buffer = message.getBytes();

        return buffer;
    }

    private void sendMessage(byte[] bytes, InetAddress address, int port) {
        try {
            if (running) {
                // Send bytes
                DatagramPacket packet = new DatagramPacket(bytes, bytes.length, address, port);
                datagramSocket.send(packet);
            }
        } catch (IOException ex) {
            Logger.getLogger(ScreenRecorder.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void sendMessageToAllClients(byte[] bytes) {
        for (int i = 0; i < streamConnections.size(); i++) {
            StreamConnection streamConnection = streamConnections.get(i);

            //String name = streamConnection.getName();
            InetAddress address = streamConnection.getAddress();
            int port = streamConnection.getPort();

            sendMessage(bytes, address, port);
        }
    }

    // Proccesing message
    private void processingMessage(DatagramPacket packet) {
        String message = new String(packet.getData());

        if (message.startsWith("\\message:")) {
            String messageToAdd = message.substring(message.indexOf(":") + 1, message.indexOf("\\end"));

            // Add message to chat panel
            jTextPaneChat.setText(jTextPaneChat.getText().concat(messageToAdd + "\n"));

            sendMessageToAllClients(packet.getData());

        } else if (message.startsWith("\\connect:")) {
            // Get user data
            String name = message.substring(message.indexOf(":") + 1, message.indexOf("\\end"));
            InetAddress address = packet.getAddress();
            int port = packet.getPort();

            if (verifyName(name)) {                
                // Create new user
                StreamConnection newUser = new StreamConnection(name, address, port);

                // Add new user to list
                streamConnections.add(newUser);

                // Add text to chat
                jTextPaneChat.setText(jTextPaneChat.getText().concat(" [" + name + "] entered the stream." + "\n"));

                // Send message about new user to all client 
                sendMessageToAllClients(getBytes("\\message: [" + name + "] entered the stream." + "\\end"));

                // Send message that stream is online
                String messageStreamOnline = "\\online";
                sendMessageToAllClients(messageStreamOnline.getBytes());
            } else
                sendMessage("\\busyName".getBytes(), address, port);
        } else if (message.startsWith("\\disconnect:")) {
            // Get user name
            String name = message.substring(message.indexOf(":") + 1, message.indexOf("\\end"));

            // Disconnect user
            for (int i = 0; i < streamConnections.size(); i++) {
                StreamConnection user = streamConnections.get(i);
                if (user.getName().equals(name)) {
                    streamConnections.remove(i);
                    break;
                }
            }

            // Add text to chat
            jTextPaneChat.setText(jTextPaneChat.getText().concat(" [" + name + "] came out of the stream." + "\n"));
            // Send message about new user to all client 
            sendMessageToAllClients(getBytes("\\message: [" + name + "] came out of the stream." + "\\end"));
        }
    }

    // Verify if user exist in list
    boolean verifyName(String name) {
        for (int i = 0; i < streamConnections.size(); i++) {
            StreamConnection user = streamConnections.get(i);
            if (user.getName().equals(name)) {
                return false;
            }
        }

        return true;
    }

    private void stopStream() {
        // Send message that stream is online
        sendMessageToAllClients("\\offline".getBytes());
        // Set running to true
        running = false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ScreenRecorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ScreenRecorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ScreenRecorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ScreenRecorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ScreenRecorder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSendMessage;
    private javax.swing.JLabel jLabelDisplayImages;
    private javax.swing.JLabel jLabelStreamStatusOff;
    private javax.swing.JLabel jLabelStreamStatusOn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanelCloseWindow;
    private javax.swing.JPanel jPanelDragWindow;
    private javax.swing.JPanel jPanelMinimizeWindow;
    private javax.swing.JPanel jPanelStreamStatusOff;
    private javax.swing.JPanel jPanelStreamStatusOn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldMessage;
    private javax.swing.JTextPane jTextPaneChat;
    // End of variables declaration//GEN-END:variables
}
