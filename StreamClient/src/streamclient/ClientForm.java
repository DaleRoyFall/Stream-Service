/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package streamclient;

import java.awt.Color;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.imgscalr.Scalr;

/**
 *
 * @author olegb
 */
public class ClientForm extends javax.swing.JFrame {

    private MouseEvent getPositionEvent;

    private DatagramSocket clientSocket;
    private InetAddress address;
    private int port = 1331;

    private String name = null;

    private boolean running = false;
    private boolean streamStatus = false;
    private boolean streamStatusRunning = true;

    private ArrayList<String> adminMessages = new ArrayList<String>();

    /**
     * Creates new form StreamClientForm
     */
    public ClientForm() {
        initComponents();

        try {
            BufferedImage image = ImageIO.read(StreamClient.class.getResource("/images/StreamOffline.jpg"));
            image = Scalr.resize(image, Scalr.Method.BALANCED, 480, 270);
            jLabelDisplayImages.setIcon(new ImageIcon(image));
        } catch (IOException ex) {
            Logger.getLogger(ClientForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        startStreamStatusMessageThread();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelDragWindow = new javax.swing.JPanel();
        jPanelCloseWindow = new javax.swing.JPanel();
        jPanelMinimizeWindow = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabelDisplayImages = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPaneChat = new javax.swing.JTextPane();
        jTextFieldMessage = new javax.swing.JTextField();
        jButtonSendMessage = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabelStreamStatusMessage = new javax.swing.JLabel();
        jTextFieldName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanelDragWindow.setBackground(new java.awt.Color(1, 50, 67));
        jPanelDragWindow.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanelDragWindowMouseDragged(evt);
            }
        });
        jPanelDragWindow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanelDragWindowMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanelDragWindowLayout = new javax.swing.GroupLayout(jPanelDragWindow);
        jPanelDragWindow.setLayout(jPanelDragWindowLayout);
        jPanelDragWindowLayout.setHorizontalGroup(
            jPanelDragWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        jPanelDragWindowLayout.setVerticalGroup(
            jPanelDragWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        getContentPane().add(jPanelDragWindow, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 50));

        jPanelCloseWindow.setBackground(new java.awt.Color(228, 141, 154));
        jPanelCloseWindow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanelCloseWindowMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCloseWindowLayout = new javax.swing.GroupLayout(jPanelCloseWindow);
        jPanelCloseWindow.setLayout(jPanelCloseWindowLayout);
        jPanelCloseWindowLayout.setHorizontalGroup(
            jPanelCloseWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        jPanelCloseWindowLayout.setVerticalGroup(
            jPanelCloseWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        getContentPane().add(jPanelCloseWindow, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 0, -1, 50));

        jPanelMinimizeWindow.setBackground(new java.awt.Color(228, 241, 254));
        jPanelMinimizeWindow.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanelMinimizeWindowMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanelMinimizeWindowLayout = new javax.swing.GroupLayout(jPanelMinimizeWindow);
        jPanelMinimizeWindow.setLayout(jPanelMinimizeWindowLayout);
        jPanelMinimizeWindowLayout.setHorizontalGroup(
            jPanelMinimizeWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        jPanelMinimizeWindowLayout.setVerticalGroup(
            jPanelMinimizeWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );

        getContentPane().add(jPanelMinimizeWindow, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 0, -1, 50));

        jPanel1.setBackground(new java.awt.Color(228, 241, 254));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jLabelDisplayImages, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 47, 484, 293));

        jTextPaneChat.setEditable(false);
        jScrollPane1.setViewportView(jTextPaneChat);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 60, 190, 239));

        jTextFieldMessage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldMessageKeyPressed(evt);
            }
        });
        jPanel1.add(jTextFieldMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 310, 110, 20));

        jButtonSendMessage.setText("Send");
        jButtonSendMessage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButtonSendMessageMousePressed(evt);
            }
        });
        jPanel1.add(jButtonSendMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 310, 70, 20));

        jPanel6.setBackground(new java.awt.Color(92, 151, 191));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabelStreamStatusMessage.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelStreamStatusMessage.setForeground(new java.awt.Color(0, 255, 51));
        jPanel6.add(jLabelStreamStatusMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 40));

        jPanel1.add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 40));

        jTextFieldName.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldName.setToolTipText("Your name");
        jTextFieldName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldNameKeyPressed(evt);
            }
        });
        jPanel1.add(jTextFieldName, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 0, 100, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 700, 350));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jPanelDragWindowMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelDragWindowMouseDragged
        // Set new location
        setLocation(evt.getXOnScreen() - getPositionEvent.getX(),
                evt.getYOnScreen() - getPositionEvent.getY());
    }//GEN-LAST:event_jPanelDragWindowMouseDragged

    private void jPanelDragWindowMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelDragWindowMousePressed
        // Get current position
        getPositionEvent = evt;
    }//GEN-LAST:event_jPanelDragWindowMousePressed

    private void jPanelCloseWindowMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelCloseWindowMousePressed
        closeClient();

        System.exit(0);
    }//GEN-LAST:event_jPanelCloseWindowMousePressed

    private void jPanelMinimizeWindowMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanelMinimizeWindowMousePressed
        this.setState(ICONIFIED);
    }//GEN-LAST:event_jPanelMinimizeWindowMousePressed

    private void jButtonSendMessageMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonSendMessageMousePressed
        String message = jTextFieldMessage.getText();

        jTextFieldMessage.setText("");
        if (!message.isEmpty() && streamStatus != false)
            sendMessage("\\message: ", name + ": " + message);
    }//GEN-LAST:event_jButtonSendMessageMousePressed

    private void jTextFieldNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNameKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            name = jTextFieldName.getText();
            jTextFieldName.setEditable(false);

            startClient();
        }
    }//GEN-LAST:event_jTextFieldNameKeyPressed

    private void jTextFieldMessageKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldMessageKeyPressed
        if (evt.getKeyCode() == evt.VK_ENTER) {
            String message = jTextFieldMessage.getText();

            jTextFieldMessage.setText("");
            if (!message.isEmpty() && streamStatus != false) {
                sendMessage("\\message: ", name + ": " + message);
            }
        }
    }//GEN-LAST:event_jTextFieldMessageKeyPressed

    private void startClient() {
        try {

            clientSocket = new DatagramSocket();
            address = InetAddress.getByName("localhost");

            // Send message to connect to server
            sendMessage("\\connect:", name);

            // Set running to true
            running = true;

            // Start thread to listen server
            startClientThread();

            // Start thread to set stream status
            //startStreamStatusMessageThread();
        } catch (IOException ex) {
            Logger.getLogger(ClientForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    // Send message to connect to server
    private void sendMessage(String type, String message) {
        try {
            if (name != null) {
                String messageToSend = type + message + "\\end";

                byte[] connectionbBuffer = messageToSend.getBytes();
                DatagramPacket packet = new DatagramPacket(connectionbBuffer, connectionbBuffer.length, address, port);
                clientSocket.send(packet);
            }
        } catch (IOException ex) {
            Logger.getLogger(ClientForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void startClientThread() {
        new Thread("Screen Display") {
            BufferedImage image;
            Image scaledImage;

            DatagramPacket packet;

            byte[] buffer = new byte[33000];

            @Override
            public void run() {
                while (running) {
                    try {
                        packet = new DatagramPacket(buffer, buffer.length);
                        clientSocket.receive(packet);

                        processingMessage(packet);

                    } catch (IOException ex) {
                        Logger.getLogger(ClientForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }.start();
    }

    // Proccesing message
    private void processingMessage(DatagramPacket packet) {
        String message = new String(packet.getData());

        if (message.startsWith("\\message")) {
            String messageToAdd = message.substring(message.indexOf(":") + 1, message.indexOf("\\end"));

            if (messageToAdd.startsWith(" Admin")) {
                System.out.println(messageToAdd);
                adminMessages.add(messageToAdd);
            }

            // Add message to chat panel
            jTextPaneChat.setText(jTextPaneChat.getText().concat(messageToAdd + "\n"));
        } else if (message.startsWith("\\online")) {
            streamStatus = true;

        } else if (message.startsWith("\\offline")) {
            streamStatus = false;

            try {
                BufferedImage image = ImageIO.read(StreamClient.class.getResource("/images/StreamOffline.jpg"));
                image = Scalr.resize(image, Scalr.Method.BALANCED, 480, 270);
                jLabelDisplayImages.setIcon(new ImageIcon(image));
            } catch (IOException ex) {
                Logger.getLogger(ClientForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (message.startsWith("\\busyName")) {
            jTextFieldName.setEditable(true);

            jTextPaneChat.setText(jTextPaneChat.getText().concat(" [Client]: Name is already used!" + "\n"));
        } else {
            try {

                InputStream in = new ByteArrayInputStream(packet.getData());
                BufferedImage image = ImageIO.read(in);

                jLabelDisplayImages.setIcon(new ImageIcon(image));
            } catch (IOException ex) {
                Logger.getLogger(ClientForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void startStreamStatusMessageThread() {
        new Thread("Stream status") {

            int labelWidth = jLabelStreamStatusMessage.getWidth();

            @Override
            public void run() {
                jLabelStreamStatusMessage.setText("");
                String nameless = "Enter your name";

                String onStream = "Stream is now online";
                String offStream = "Stream is now offline";

                String currentMessage = "";

                char charAt;

                while (streamStatusRunning) {
                    try {

                        if (name == null) {
                            currentMessage = nameless;
                            jLabelStreamStatusMessage.setForeground(new Color(228, 141, 154));
                        } else if (streamStatus == false) {
                            currentMessage = offStream;
                            jLabelStreamStatusMessage.setForeground(new Color(228, 141, 154));
                        } else if (streamStatus == true && adminMessages.isEmpty()) {
                            currentMessage = onStream;
                            jLabelStreamStatusMessage.setForeground(new Color(0, 255, 51));
                        } else if (streamStatus == true && !adminMessages.isEmpty()) {
                            currentMessage = adminMessages.get(0);
                            adminMessages.remove(0);
                            jLabelStreamStatusMessage.setForeground(new Color(0, 255, 51));
                        }

                        jLabelStreamStatusMessage.setText("");

                        for (int i = currentMessage.length() - 1; i >= 0; i--) {
                            charAt = currentMessage.charAt(i);
                            jLabelStreamStatusMessage.setText(String.valueOf(charAt).concat(jLabelStreamStatusMessage.getText()));
                            Thread.sleep(100);
                        }

                        for (int i = 0; i < 5; i++) {
                            jLabelStreamStatusMessage.setText(" ".concat(jLabelStreamStatusMessage.getText()));
                            Thread.sleep(100);
                        }

                        Thread.sleep(3000);

                        for (int i = 200 - currentMessage.length() - 1; i >= 0; i--) {
                            jLabelStreamStatusMessage.setText(" ".concat(jLabelStreamStatusMessage.getText()));
                            Thread.sleep(40);
                        }

                        //Thread.sleep(2000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(ClientForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }.start();
    }

    private void closeClient() {
        running = false;
        streamStatusRunning = false;

        sendMessage("\\disconnect:", name);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSendMessage;
    private javax.swing.JLabel jLabelDisplayImages;
    private javax.swing.JLabel jLabelStreamStatusMessage;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanelCloseWindow;
    private javax.swing.JPanel jPanelDragWindow;
    private javax.swing.JPanel jPanelMinimizeWindow;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldMessage;
    private javax.swing.JTextField jTextFieldName;
    private javax.swing.JTextPane jTextPaneChat;
    // End of variables declaration//GEN-END:variables
}
